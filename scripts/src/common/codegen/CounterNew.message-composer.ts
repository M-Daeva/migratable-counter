/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, ActionType, Uint128, QueryMsg, MigrateMsg, Addr, ArrayOfQueryCountersResponse, QueryCountersResponse } from "./CounterNew.types";
export interface CounterNewMsg {
  contractAddress: string;
  sender: string;
  createCounter: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCounter: ({
    actionType,
    value
  }: {
    actionType: ActionType;
    value: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCounter: ({
    value
  }: {
    value: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CounterNewMsgComposer implements CounterNewMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCounter = this.createCounter.bind(this);
    this.updateCounter = this.updateCounter.bind(this);
    this.setCounter = this.setCounter.bind(this);
  }

  createCounter = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_counter: {}
        })),
        funds: _funds
      })
    };
  };
  updateCounter = ({
    actionType,
    value
  }: {
    actionType: ActionType;
    value: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_counter: {
            action_type: actionType,
            value
          }
        })),
        funds: _funds
      })
    };
  };
  setCounter = ({
    value
  }: {
    value: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_counter: {
            value
          }
        })),
        funds: _funds
      })
    };
  };
}