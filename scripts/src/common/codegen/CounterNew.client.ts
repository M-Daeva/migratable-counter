/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ActionType, Uint128, QueryMsg, MigrateMsg, Addr, ArrayOfQueryCountersResponse, QueryCountersResponse } from "./CounterNew.types";
export interface CounterNewReadOnlyInterface {
  contractAddress: string;
  queryCounters: ({
    addresses
  }: {
    addresses?: string[];
  }) => Promise<ArrayOfQueryCountersResponse>;
  queryTotalCalls: () => Promise<Uint128>;
  queryTotalCallsPrevious: () => Promise<Uint128>;
}
export class CounterNewQueryClient implements CounterNewReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryCounters = this.queryCounters.bind(this);
    this.queryTotalCalls = this.queryTotalCalls.bind(this);
    this.queryTotalCallsPrevious = this.queryTotalCallsPrevious.bind(this);
  }

  queryCounters = async ({
    addresses
  }: {
    addresses?: string[];
  }): Promise<ArrayOfQueryCountersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_counters: {
        addresses
      }
    });
  };
  queryTotalCalls = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_total_calls: {}
    });
  };
  queryTotalCallsPrevious = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_total_calls_previous: {}
    });
  };
}
export interface CounterNewInterface extends CounterNewReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createCounter: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateCounter: ({
    actionType,
    value
  }: {
    actionType: ActionType;
    value: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setCounter: ({
    value
  }: {
    value: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CounterNewClient extends CounterNewQueryClient implements CounterNewInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCounter = this.createCounter.bind(this);
    this.updateCounter = this.updateCounter.bind(this);
    this.setCounter = this.setCounter.bind(this);
  }

  createCounter = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_counter: {}
    }, fee, memo, _funds);
  };
  updateCounter = async ({
    actionType,
    value
  }: {
    actionType: ActionType;
    value: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_counter: {
        action_type: actionType,
        value
      }
    }, fee, memo, _funds);
  };
  setCounter = async ({
    value
  }: {
    value: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_counter: {
        value
      }
    }, fee, memo, _funds);
  };
}